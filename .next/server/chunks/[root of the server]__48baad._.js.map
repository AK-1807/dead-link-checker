{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 311, "column": 0}, "map": {"version":3,"sources":["file:///Users/bb/sites/git%20repos/dead-link-checker/app/api/check-links/route.js"],"sourcesContent":["import axios from 'axios';\nimport * as cheerio from 'cheerio'; // Updated import\n\n// This function will be invoked when the API route is hit\nexport async function POST(req) {\n  const { url } = await req.json();\n\n  if (!url) {\n    return new Response(JSON.stringify({ error: 'URL is required' }), {\n      status: 400,\n    });\n  }\n\n  try {\n    // Fetch the HTML content of the page\n    const response = await axios.get(url);\n    const html = response.data;\n\n    // Load HTML content into cheerio\n    const $ = cheerio.load(html);\n\n    // Extract all the links (anchor tags)\n    const links = [];\n    $('a').each((i, element) => {\n      const href = $(element).attr('href');\n      if (href) {\n        links.push(href);\n      }\n    });\n\n    // Check the status of each link\n    const linkStatus = await checkLinkStatus(links);\n\n    return new Response(JSON.stringify({ status: 'success', linkStatus }), {\n      status: 200,\n    });\n  } catch (error) {\n    console.error(error);\n    return new Response(\n      JSON.stringify({ error: 'Failed to fetch the URL or crawl the page' }),\n      { status: 500 }\n    );\n  }\n}\n\nasync function checkLinkStatus(links) {\n  const statusArr = [];\n  for (const link of links) {\n    try {\n      const res = await axios.get(link, { timeout: 5000 });\n      statusArr.push({ link, status: res.status });\n    } catch (error) {\n      statusArr.push({\n        link,\n        status: error.response ? error.response.status : 'Timeout/Other Error',\n      });\n    }\n  }\n  return statusArr;\n}\n"],"names":[],"mappings":";;;AACA,2SAAoC,iBAAiB;AADrD;AACA;;;AAGO,eAAe,KAAK,GAAG;IAC5B,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM,IAAI,IAAI;IAE9B,IAAI,CAAC,KAAK;QACR,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,OAAO;QAAkB,IAAI;YAChE,QAAQ;QACV;IACF;IAEA,IAAI;QACF,qCAAqC;QACrC,MAAM,WAAW,MAAM,uIAAA,CAAA,UAAK,CAAC,GAAG,CAAC;QACjC,MAAM,OAAO,SAAS,IAAI;QAE1B,iCAAiC;QACjC,MAAM,IAAI,kJAAQ,IAAI,CAAC;QAEvB,sCAAsC;QACtC,MAAM,QAAQ,EAAE;QAChB,EAAE,KAAK,IAAI,CAAC,CAAC,GAAG;YACd,MAAM,OAAO,EAAE,SAAS,IAAI,CAAC;YAC7B,IAAI,MAAM;gBACR,MAAM,IAAI,CAAC;YACb;QACF;QAEA,gCAAgC;QAChC,MAAM,aAAa,MAAM,gBAAgB;QAEzC,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,QAAQ;YAAW;QAAW,IAAI;YACrE,QAAQ;QACV;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;YAAE,OAAO;QAA4C,IACpE;YAAE,QAAQ;QAAI;IAElB;AACF;AAEA,eAAe,gBAAgB,KAAK;IAClC,MAAM,YAAY,EAAE;IACpB,KAAK,MAAM,QAAQ,MAAO;QACxB,IAAI;YACF,MAAM,MAAM,MAAM,uIAAA,CAAA,UAAK,CAAC,GAAG,CAAC,MAAM;gBAAE,SAAS;YAAK;YAClD,UAAU,IAAI,CAAC;gBAAE;gBAAM,QAAQ,IAAI,MAAM;YAAC;QAC5C,EAAE,OAAO,OAAO;YACd,UAAU,IAAI,CAAC;gBACb;gBACA,QAAQ,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,MAAM,GAAG;YACnD;QACF;IACF;IACA,OAAO;AACT"}},
    {"offset": {"line": 379, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}