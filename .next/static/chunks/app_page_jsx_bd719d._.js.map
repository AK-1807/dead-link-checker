{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/bb/sites/git%20repos/dead-link-checker/app/page.jsx"],"sourcesContent":["\"use client\"\nimport { useState } from \"react\";\nconst axios = require('axios');\n\n\n\nconst proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\nexport default function Home() {\n  const [url, setUrl] = useState(\"\")\n\n\n\n  // async function getLinksFromWebsite() {\n  //   console.log(url)\n\n  //    try {\n  //       const response = await fetch(`${proxyUrl}${url}`);\n        \n  //       // if (!response.ok) {\n  //       //   const errorText = await response.text(); \n  //       //   console.error('Error fetching links:', errorText); \n  //       //   return;\n  //       // }\n\n  //       const data = await response.text();\n  //       console.log(data)\n  //       // if (data.links) {\n  //       //   console.log(data.links); // Array of links\n  //       // } else {\n  //       //   console.error('No links found in response');\n  //       // }\n  //     } catch (error) {\n  //       console.error('Error fetching links:', error);\n  //     }\n  // }\n  const [data, setData] = useState(\"\"); \n  const [error, setError] = useState(\"\"); \n\n  async function getLinksFromWebsite() {\n    if (!url) {\n      setError(\"Please enter a URL.\");\n      return;\n    }\n    // Make a GET request to the server we just set up\n    axios.get(`${url}`)\n    .then(response => {\n      console.log('Response from server:', response.data);\n    })\n    .catch(error => {\n      console.error('Error:', error);\n    });\n\n    // try {\n    //   // Call the Next.js API route to fetch the page content\n    //   const response = await fetch(`/api/fetchLinks?url=${url}`);\n    //   const result = await response.text();\n\n    //   if (response.ok) {\n    //     setData(result.data); \n    //     setError(\"\"); \n    //   } else {\n    //     setData(\"\"); \n    //     setError(result.error || \"Something went wrong.\");\n    //   }\n    // } catch (error) {\n    //   setError(\"Error fetching links\");\n    //   setData(\"\");\n    // }\n  }\n  \n\n  return (\n    <section className=\"py-[60px]\">\n      <div className=\"container px-[20px] w-full max-w-[1244px] mx-auto\">\n        <h3>Site Checker: Free Broken Link Tool</h3>\n        <div className=\"mt-[30px] w-full\">\n          \n          <input className=\"h-[60px] w-full border-2 border-indigo-600 p-[10px] rounded-[8px]\" type=\"url\" placeholder=\"Enter URL\" onInput={(e)=>setUrl(e.target.value)} required/>\n        </div>\n        <div className=\"text-center mt-[30px]\">\n          <button className=\"px-[15px] rounded-[8px] py-[5px] bg-indigo-600 text-white\" onClick={getLinksFromWebsite}>\n            Check\n          </button>\n        </div>\n       \n      </div>\n    </section>\n  );\n}\n\n\n\n\n\n"],"names":[],"mappings":";;;;AACA;;;AADA;;AAEA,MAAM;AAIN,MAAM,WAAW;AACF,SAAS;;IACtB,MAAM,CAAC,KAAK,OAAO,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAI/B,yCAAyC;IACzC,qBAAqB;IAErB,WAAW;IACX,2DAA2D;IAE3D,+BAA+B;IAC/B,uDAAuD;IACvD,iEAAiE;IACjE,qBAAqB;IACrB,aAAa;IAEb,4CAA4C;IAC5C,0BAA0B;IAC1B,6BAA6B;IAC7B,wDAAwD;IACxD,oBAAoB;IACpB,0DAA0D;IAC1D,aAAa;IACb,wBAAwB;IACxB,uDAAuD;IACvD,QAAQ;IACR,IAAI;IACJ,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACjC,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAEnC,eAAe;QACb,IAAI,CAAC,KAAK;YACR,SAAS;YACT;QACF;QACA,kDAAkD;QAClD,MAAM,GAAG,CAAC,GAAG,KAAK,EACjB,IAAI,CAAC,CAAA;YACJ,QAAQ,GAAG,CAAC,yBAAyB,SAAS,IAAI;QACpD,GACC,KAAK,CAAC,CAAA;YACL,QAAQ,KAAK,CAAC,UAAU;QAC1B;IAEA,QAAQ;IACR,4DAA4D;IAC5D,gEAAgE;IAChE,0CAA0C;IAE1C,uBAAuB;IACvB,6BAA6B;IAC7B,qBAAqB;IACrB,aAAa;IACb,oBAAoB;IACpB,yDAAyD;IACzD,MAAM;IACN,oBAAoB;IACpB,sCAAsC;IACtC,iBAAiB;IACjB,IAAI;IACN;IAGA,qBACE,6LAAC;QAAQ,WAAU;kBACjB,cAAA,6LAAC;YAAI,WAAU;;8BACb,6LAAC;8BAAG;;;;;;8BACJ,6LAAC;oBAAI,WAAU;8BAEb,cAAA,6LAAC;wBAAM,WAAU;wBAAoE,MAAK;wBAAM,aAAY;wBAAY,SAAS,CAAC,IAAI,OAAO,EAAE,MAAM,CAAC,KAAK;wBAAG,QAAQ;;;;;;;;;;;8BAExK,6LAAC;oBAAI,WAAU;8BACb,cAAA,6LAAC;wBAAO,WAAU;wBAA4D,SAAS;kCAAqB;;;;;;;;;;;;;;;;;;;;;;AAQtH;GAjFwB;KAAA"}},
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}